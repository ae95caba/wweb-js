const axios = require("axios");

// Estado de conversación por usuario
const userStates = {}; // { [userId]: { state: 'menu' | 'option1' | 'option2' | etc } }

// Función para mostrar el menú principal
function getMainMenu() {
  return `🤖 *Bienvenido al Bot*

Por favor, selecciona una opción:

1️⃣ *Información*
2️⃣ *Servicios*
3️⃣ *Contacto*
4️⃣ *Ayuda*
5️⃣ *Salir*

Responde con el número de la opción (1-5)`;
}

// Función para manejar las opciones del menú
function handleMenuOption(option, userId) {
  switch (option) {
    case "1":
      return `ℹ️ *Información*
      
Somos una empresa dedicada a brindar soluciones tecnológicas de calidad. Nuestro equipo está comprometido con la excelencia y la innovación.

¿Deseas volver al menú principal? Responde con "menu"`;

    case "2":
      return `🛠️ *Servicios*
      
Ofrecemos los siguientes servicios:
• Desarrollo web
• Aplicaciones móviles
• Consultoría IT
• Soporte técnico

¿Deseas volver al menú principal? Responde con "menu"`;

    case "3":
      return `📞 *Contacto*
      
Puedes contactarnos a través de:
• WhatsApp: +1234567890
• Email: info@empresa.com
• Web: www.empresa.com

¿Deseas volver al menú principal? Responde con "menu"`;

    case "4":
      return `❓ *Ayuda*
      
Si necesitas ayuda, puedes:
• Escribir "menu" para volver al menú principal
• Contactar a soporte: +1234567890
• Visitar nuestra web: www.empresa.com/ayuda

¿Deseas volver al menú principal? Responde con "menu"`;

    case "5":
      userStates[userId] = { state: "menu" };
      return `👋 *¡Hasta luego!*
      
Gracias por usar nuestro bot. ¡Que tengas un excelente día!

Para volver a empezar, escribe "hola" o "menu"`;

    default:
      return `❌ Opción no válida. Por favor, selecciona un número del 1 al 5.

${getMainMenu()}`;
  }
}

// Función principal para manejar mensajes del bot
function handleBotMessage(message) {
  const userId = message.from;
  const userMessage = message.body ? message.body.toLowerCase().trim() : "";

  // Inicializar estado del usuario si no existe
  if (!userStates[userId]) {
    userStates[userId] = { state: "menu" };
  }

  let response = "";

  // Manejar comandos especiales
  if (
    userMessage === "hola" ||
    userMessage === "menu" ||
    userMessage === "inicio"
  ) {
    userStates[userId] = { state: "menu" };
    response = getMainMenu();
  }
  // Manejar opciones del menú
  else if (userStates[userId].state === "menu") {
    if (["1", "2", "3", "4", "5"].includes(userMessage)) {
      response = handleMenuOption(userMessage, userId);
    } else {
      response = `❌ Por favor, selecciona una opción válida (1-5).

${getMainMenu()}`;
    }
  }
  // Si no hay respuesta válida
  else {
    response = `❌ Comando no reconocido. Escribe "menu" para volver al menú principal.

${getMainMenu()}`;
  }

  return response;
}

async function shouldIgnoreMessage(message) {
  let name;
  let log;
  const isFromMe = message._data.id.fromMe;
  const targetNumber = "5491130350056@c.us"; // The number you don't want to forward messages to/from

  const hasImage = message.type === "image";

  const chat = await message.getChat();
  // Check if the chat is archived
  const isArchived = chat.archived;
  // Ignore status updates (WhatsApp Stories)
  const isStory = message.from === "status@broadcast";
  const isSticker = message.type === "sticker";
  const isVoiceMessage = message.type === "ptt";
  console.log("message type is: ");
  console.log(message.type);
  const isTextLess = !message.body || message.body === "";

  //ignore group messages
  const isGroupChat = chat.id.server === "g.us";
  //ignore muted chats
  const isMuted = chat.muteExpiration === -1;
  // Skip empty or "This message can't be displayed here" messages
  const isEmpty = !hasImage && isTextLess && !isVoiceMessage && !isSticker;
  // Ignore messages sent to or received from the target number
  const isIrrelevant =
    message.from === targetNumber || message.to === targetNumber;
  const reasonsToIgnoreMessage = [];

  if (isGroupChat) reasonsToIgnoreMessage.push("isGroupChat");
  if (isArchived) reasonsToIgnoreMessage.push("isArchived");
  if (isStory) reasonsToIgnoreMessage.push("isStory");

  /* if (isIrrelevant) reasonsToIgnoreMessage.push("isIrrelevant"); */
  if (isMuted) reasonsToIgnoreMessage.push("isMuted");
  if (isEmpty) reasonsToIgnoreMessage.push("isEmpty");

  if (reasonsToIgnoreMessage.length > 0) {
    console.log("--------------- START -------------------");
    console.log("return triggered");
    console.log("reason:", reasonsToIgnoreMessage.join(", "));
    console.log("--------------- END -------------------");
    return reasonsToIgnoreMessage.length;
  }
}

module.exports = { shouldIgnoreMessage, handleBotMessage };
